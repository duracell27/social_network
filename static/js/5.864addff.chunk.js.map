{"version":3,"sources":["hoc/withAuthRedirect.js","Components/Dialogs/Dialogs.module.css","Components/Dialogs/DialogItem/DialogItem.jsx","Components/Dialogs/Message/Message.jsx","Components/Dialogs/Dialogs.jsx","Components/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogItem","className","cls","dialog","active","id","dialogWrap","src","picUrl","alt","name","Message","my","message","maxLength","maxLengthCreator","AddMessageFormRedux","reduxForm","form","addMessage","onSubmit","handleSubmit","Field","component","TextArea","placeholder","validate","requiredField","Dialogs","dialogsElements","dialogsData","map","messagesElements","messagesData","dialogs","dialogsItems","messages","formData","newMessage","compose","newMessageText","dispatch","addMessageActionCreator"],"mappings":"wNAIIA,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IACtCC,EADqC,uKAGnC,OAAIC,KAAKC,MAAMN,OAER,kBAACG,EAAcE,KAAKC,OAFG,kBAAC,IAAD,CAAUC,GAAI,cAHT,GACXC,IAAML,WAStC,OADoCM,YAAQX,EAARW,CAAoCL,K,oBChB5EM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,GAAK,oBAAoB,WAAa,4BAA4B,WAAa,8B,+FCgB5SC,EAbI,SAACN,GAChB,OACI,yBAAKO,UAAS,UAAKC,IAAIC,OAAT,YAAmBD,IAAIE,SACjC,kBAAC,IAAD,CAAST,GAAE,mBAAcD,EAAMW,KAC3B,yBAAKJ,UAAWC,IAAII,YAChB,yBAAKC,IAAKb,EAAMc,OAAQC,IAAI,QAC3Bf,EAAMgB,SCQZC,EAbC,SAACjB,GAEb,OAAGA,EAAMkB,GAED,yBAAKX,UAAS,UAAKC,IAAIW,QAAT,YAAoBX,IAAIU,KAAOlB,EAAMmB,SAInD,yBAAKZ,UAAWC,IAAIW,SAAUnB,EAAMmB,U,iCCL5CC,EAAYC,YAAiB,IA6C3BC,EAAsBC,YAAU,CAClCC,KAAM,cADkBD,EAVL,SAACvB,GACpB,OACI,0BAAMO,UAAWC,IAAIiB,WAAYC,SAAU1B,EAAM2B,cAC7C,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUd,KAAM,aAAce,YAAa,qBAAsBC,SAAU,CAACC,IAAeb,KAC7G,6BACA,mDASGc,EA/CC,SAAClC,GAEb,IAAImC,EAAkBnC,EAAMoC,YAAYC,KAAK,SAAA5B,GAAM,OAAI,kBAAC,EAAD,CAAYO,KAAMP,EAAOO,KAAML,GAAIF,EAAOE,GAAIG,OAAQL,EAAOK,YAEhHwB,EAAmBtC,EAAMuC,aAAaF,KAAK,SAAAlB,GAAO,OAAI,kBAAC,EAAD,CAASA,QAASA,EAAQA,QAASR,GAAIQ,EAAQR,GAAIO,GAAIC,EAAQD,QAezH,OACI,yBAAKX,UAAWC,IAAIgC,SAChB,yBAAKjC,UAAWC,IAAIiC,cACfN,GAEL,yBAAK5B,UAAWC,IAAIkC,UACfJ,EACD,kBAAChB,EAAD,CAAqBI,SAXb,SAACiB,GACjB3C,EAAMyB,WAAWkB,EAASC,kB,wBCFnBC,sBACX1C,aAlBkB,SAACV,GACnB,MAAM,CACF2C,YAAa3C,EAAMiD,SAASN,YAC5BG,aAAc9C,EAAMiD,SAASH,aAC7BO,eAAgBrD,EAAMiD,SAASI,mBAId,SAACC,GACtB,MAAM,CACFtB,WAAY,SAACmB,GAETG,EAASC,YAAwBJ,SAOzChD,IAFWiD,CAGbX","file":"static/js/5.864addff.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component{\r\n        render(){\r\n            if(!this.props.isAuth) return <Redirect to={'login'} />\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    \r\n   let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n    return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2GWqS\",\"dialogsItems\":\"Dialogs_dialogsItems__2Iv_v\",\"dialog\":\"Dialogs_dialog__2iTF0\",\"active\":\"Dialogs_active__1DnAd\",\"messages\":\"Dialogs_messages__ZHYjF\",\"message\":\"Dialogs_message__Sey_e\",\"my\":\"Dialogs_my__35o5C\",\"dialogWrap\":\"Dialogs_dialogWrap__hLaSw\",\"addMessage\":\"Dialogs_addMessage__20Fhc\"};","import React from 'react';\r\nimport cls from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={`${cls.dialog} ${cls.active}`}>\r\n            <NavLink to={`/dialogs/${props.id}`}>\r\n                <div className={cls.dialogWrap}>\r\n                    <img src={props.picUrl} alt=\"ava\" />\r\n                    {props.name}\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport cls from './../Dialogs.module.css';\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n\r\n    if(props.my){\r\n        return(\r\n            <div className={`${cls.message} ${cls.my}`}>{props.message}</div>\r\n        );\r\n    }else{\r\n        return(\r\n            <div className={cls.message}>{props.message}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport cls from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\nimport {TextArea} from \"../Common/FormsControls/FormsControls\";\r\n\r\nlet maxLength = maxLengthCreator(30);\r\n\r\nconst Dialogs = (props) => {\r\n    \r\n    let dialogsElements = props.dialogsData.map( dialog => <DialogItem name={dialog.name} id={dialog.id} picUrl={dialog.picUrl}/> );\r\n\r\n    let messagesElements = props.messagesData.map( message => <Message message={message.message} id={message.id} my={message.my}/> );\r\n\r\n    let addMessage = () => {\r\n        props.addMessage();\r\n    }\r\n    \r\n    // let onMessageChange = () => {\r\n    //     let text = addNewMessage.current.value;\r\n    //     props.updateNewMessageBody(text);\r\n    // }\r\n\r\n    let addNewMessage = (formData) => {\r\n        props.addMessage(formData.newMessage);\r\n    }\r\n\r\n    return (\r\n        <div className={cls.dialogs}>\r\n            <div className={cls.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={cls.messages}>\r\n                {messagesElements}\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form className={cls.addMessage} onSubmit={props.handleSubmit}>\r\n            <Field component={TextArea} name={'newMessage'} placeholder={'Enter your message'} validate={[requiredField, maxLength]}/>\r\n            <br></br>\r\n            <button>Add Message</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: 'addMessage'\r\n})(AddMessageForm);\r\n\r\nexport default Dialogs;","import { addMessageActionCreator, updateNewMessageTextActionCreator } from '../../redux/messagesReducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return{\r\n        dialogsData: state.messages.dialogsData,\r\n        messagesData: state.messages.messagesData,\r\n        newMessageText: state.messages.newMessageText,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        addMessage: (newMessage) => {\r\n            \r\n            dispatch(addMessageActionCreator(newMessage));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}